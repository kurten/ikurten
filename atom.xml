<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ikurten.com]]></title>
  <link href="http://ikurten.com/atom.xml" rel="self"/>
  <link href="http://ikurten.com/"/>
  <updated>2013-03-07T00:33:12+08:00</updated>
  <id>http://ikurten.com/</id>
  <author>
    <name><![CDATA[Kurten]]></name>
    <email><![CDATA[chinkurten@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[博客迁移]]></title>
    <link href="http://ikurten.com/blog/2013/01/27/blog-migrate-to-github/"/>
    <updated>2013-01-27T16:29:00+08:00</updated>
    <id>http://ikurten.com/blog/2013/01/27/blog-migrate-to-github</id>
    <content type="html"><![CDATA[<h3>关于博客迁移</h3>

<blockquote><p>满打满算，折腾了大半天终于把博客迁移的事情搞定了。接下去可以使用markdown来写blog了。mac下面有个不错的工具<a href="http://mouapp.com/">Mou</a>，可以即时查看写的成果。blog是托管在<a href="https://github.com">github</a>上面的，其实就是使用<a href="http://jekyllrb.com/">jekyll</a>来生成静态的html。博客模版用得是<a href="http://octopress.org/">octopress</a>。关于如何操作，以及怎么折腾域名指向可以参考<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">这里</a>。</p></blockquote>

<h3>关于工作</h3>

<blockquote><p>元旦后又回了杭州，加入了一家创业公司<a href="http://www.qeemo.me">Qeemo</a>。2013年希望有好的开始吧。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redis源码学习记录(二)]]></title>
    <link href="http://ikurten.com/blog/2012/10/14/redis2/"/>
    <updated>2012-10-14T07:23:59+08:00</updated>
    <id>http://ikurten.com/blog/2012/10/14/redis2</id>
    <content type="html"><![CDATA[<p>续前面那篇<a href="http://ikurten.com/blog/2012/09/19/redis1/">文章</a>。（<a href="http://redis.io/download">源码版本为之前的stable版本2.4.8</a>）</p>

<p>当redis服务启动的时候，会执行aeMain方法，该方法是event loop，他其实就是一个while循环会一直执行。处理tcp链接操作的函数在networking.c中实现,acceptTcpHandler、acceptUnixHandler、acceptCommonHandler。一旦接收到一个tcp链接，acceptCommonHandler就会创建一个redisClient，并且把它加入到event的readable列表中，等待event loop执行readQueryFromClient函数。</p>

<p>接着event loop时执行readQueryFromClient，获取客户端请求，然后执行请求，调用redis.c中processCommand &#8211;> call函数。</p>

<p>在执行循环的时候会有个beforeSleep的void指针，指向redis.c中的beforeSleep函数，这个函数会遍历所有的server.io_ready_clients，重新热入到event loop列表，并执行客户端请求(这是由于redis可以开启virtual memory，有些命令操作可能会被swapped从而被block掉)。配置在redis.conf中vm-enable选项。redis默认不开启vm。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redis源码学习记录]]></title>
    <link href="http://ikurten.com/blog/2012/09/19/redis1/"/>
    <updated>2012-09-19T00:14:47+08:00</updated>
    <id>http://ikurten.com/blog/2012/09/19/redis1</id>
    <content type="html"><![CDATA[<p>最近一直在学习redis的源代码，大致上搞清楚了它是如何启动，载入参数，开始轮询接收tcp请求，以及具体执行tcp请求的方式。参照<a href="http://pauladamsmith.com/articles/redis-under-the-hood.html">《Redis:under the hood》</a> 此文，再对照源码。目前的stable版本，和此文上有些出入，但是大致逻辑上基本一致。</p>

<p>redis按照单线程轮询(epoll、kqueue、select)tcp请求，服务端使用非阻塞IO，具体轮询代码实现，包含在ae.h、ae.c、ae_epoll.c、ae_kqueue.c、ae_select.c。tcp server实现在anet.h、anet.c。</p>

<p>主入口redis.c中的main函数（参照<a href="http://pauladamsmith.com/articles/redis-under-the-hood.html">《Redis:under the hood》</a> 此文），redis.c中的beforeSleep函数会创建所有客户端（server.io_ready_clients）中的event句柄，以及触发event时的调用的函数readQueryFromClient。</p>

<p>java的nio中selector也可以干类似的事情，不过，selector底层实现机制虽然是基于epoll、kqueue、select，但是会有自己链接自己的现象出现。具体参看<a href="http://http://blog.csdn.net/haoel/article/details/2224055">这里</a>。</p>

<p>使用redis需要注意<a href="http://redis.io/topics/latency">latency</a>，一旦某个操作很耗时的话，会导致后续操作也延时。</p>

<p>这方面，<a href="http://www.erlang.org">erlang</a>就好多了。</p>

<p>ps:我用vim+winmanager+ctags+bufferexplorer，具体配置看<a href="http://blog.csdn.net/wooin/article/details/1858917">这里</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[centos中yum无法使用问题]]></title>
    <link href="http://ikurten.com/blog/2011/12/15/centos-yum-error/"/>
    <updated>2011-12-15T14:47:34+08:00</updated>
    <id>http://ikurten.com/blog/2011/12/15/centos-yum-error</id>
    <content type="html"><![CDATA[<p>今天碰到一台服务器无法使用yum install命令，是centos 5.5的系统，自己瞎折腾了一下，居然被我解决了，神奇啊，解决方法贴一下。
显示错误如下：</p>

<pre>Loaded plugins: fastestmirror
Determining fastest mirrors
YumRepo Error: All mirror URLs are not using ftp, http[s] or file.
/Eg. 
removing mirrorlist with no valid mirrors: /var/cache/yum/addons/mirrorlist.txt
Error: Cannot find a valid baseurl for repo: addons</pre>


<p>不知道什么时候把mirrors.txt文件给去掉了。
后来查了一下有这么一串。</p>

<pre>1./var/cache/yum/base/mirrorlist.txt
url:
http://mirrors.163.com/centos/5.7/os/x86_64/
http://centos.ustc.edu.cn/centos/5.7/os/x86_64/
http://mirror.neu.edu.cn/centos/5.7/os/x86_64/
http://mirrors.ta139.com/centos/5.7/os/x86_64/
http://ftp.nsysu.edu.tw/CentOS/5.7/os/x86_64/
http://ftp.tc.edu.tw/Linux/CentOS/5.7/os/x86_64/
http://ftp.isu.edu.tw/pub/Linux/CentOS/5.7/os/x86_64/
http://ftp.stu.edu.tw/Linux/CentOS/5.7/os/x86_64/
http://ftp.twaren.net/Linux/CentOS/5.7/os/x86_64/
http://ftp.cs.pu.edu.tw/Linux/CentOS/5.7/os/x86_64/
http://mirror01.idc.hinet.net/CentOS/5.7/os/x86_64/
http://centos.mirror.cdnetworks.com/5.7/os/x86_64/
http://centos.tt.co.kr/5.7/os/x86_64/
http://data.nicehosting.co.kr/os/CentOS/5.7/os/x86_64/
http://mirror.khlug.org/centos/5.7/os/x86_64/
http://mirror.yongbok.net/centos/5.7/os/x86_64/
http://ftp.daum.net/centos/5.7/os/x86_64/
http://mirror.nus.edu.sg/centos/5.7/os/x86_64/
http://mirror.averse.net/centos/5.7/os/x86_64/
http://mirrors.sin1.sg.voxel.net/centos/5.7/os/x86_64/

2./var/cache/yum/updates/mirrorlist.txt
url:
http://mirror.neu.edu.cn/centos/5.7/updates/x86_64/
http://mirrors.ta139.com/centos/5.7/updates/x86_64/
http://mirrors.stuhome.net/centos/5.7/updates/x86_64/
http://centos.ustc.edu.cn/centos/5.7/updates/x86_64/
http://ftp.stu.edu.tw/Linux/CentOS/5.7/updates/x86_64/
http://mirror01.idc.hinet.net/CentOS/5.7/updates/x86_64/
http://ftp.tc.edu.tw/Linux/CentOS/5.7/updates/x86_64/
http://ftp.isu.edu.tw/pub/Linux/CentOS/5.7/updates/x86_64/
http://ftp.cs.pu.edu.tw/Linux/CentOS/5.7/updates/x86_64/
http://ftp.daum.net/centos/5.7/updates/x86_64/
http://mirror.khlug.org/centos/5.7/updates/x86_64/
http://data.nicehosting.co.kr/os/CentOS/5.7/updates/x86_64/
http://centos.tt.co.kr/5.7/updates/x86_64/
http://mirror.averse.net/centos/5.7/updates/x86_64/
ftp://ftp.oss.eznetsols.org/linux/centos/5.7/updates/x86_64/
http://mirror.nus.edu.sg/centos/5.7/updates/x86_64/
http://mirrors.sin1.sg.voxel.net/centos/5.7/updates/x86_64/
http://centos.vr-zone.com/5.7/updates/x86_64/
http://rsync.atworks.co.jp/centos/5.7/updates/x86_64/
http://ftp.nara.wide.ad.jp/pub/Linux/centos/5.7/updates/x86_64/

3./var/cache/yum/addons/mirrorlist.txt
url:
http://mirror.centos.org/centos/5/addons/x86_64/

4./var/cache/yum/extras/mirrorlist.txt
url:
http://centos.ustc.edu.cn/centos/5.7/extras/x86_64/
http://mirrors.stuhome.net/centos/5.7/extras/x86_64/
http://mirror.neu.edu.cn/centos/5.7/extras/x86_64/
http://mirrors.ta139.com/centos/5.7/extras/x86_64/
http://ftp.cs.pu.edu.tw/Linux/CentOS/5.7/extras/x86_64/
http://ftp.stu.edu.tw/Linux/CentOS/5.7/extras/x86_64/
http://ftp.tc.edu.tw/Linux/CentOS/5.7/extras/x86_64/
http://ftp.isu.edu.tw/pub/Linux/CentOS/5.7/extras/x86_64/
http://mirror01.idc.hinet.net/CentOS/5.7/extras/x86_64/
http://data.nicehosting.co.kr/os/CentOS/5.7/extras/x86_64/
http://mirror.khlug.org/centos/5.7/extras/x86_64/
http://ftp.daum.net/centos/5.7/extras/x86_64/
http://centos.tt.co.kr/5.7/extras/x86_64/
http://centos.vr-zone.com/5.7/extras/x86_64/
http://mirror.averse.net/centos/5.7/extras/x86_64/
http://mirrors.sin1.sg.voxel.net/centos/5.7/extras/x86_64/
ftp://ftp.oss.eznetsols.org/linux/centos/5.7/extras/x86_64/
http://mirror.nus.edu.sg/centos/5.7/extras/x86_64/
http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.7/extras/x86_64/
http://ftp.jaist.ac.jp/pub/Linux/CentOS/5.7/extras/x86_64/</pre>


<p>对应的把这些url拷贝到mirrorlist.txt文件中去就ok啦。
have fun! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阅读memcacheq源码记录]]></title>
    <link href="http://ikurten.com/blog/2011/12/04/memcacheq/"/>
    <updated>2011-12-04T12:07:34+08:00</updated>
    <id>http://ikurten.com/blog/2011/12/04/memcacheq</id>
    <content type="html"><![CDATA[<p>越来越觉着大学里学的谭浩强的《C语言程序设计》太狗血了，哎，悔不当初啊。</p>

<p>今天下午闲着看了一下<a href="http://memcachedb.org/memcacheq/">memcacheq</a>这个消息队列的源代码，存储引擎用得<a href="http://www.oracle.com/technetwork/database/berkeleydb/overview/index.html">bdb</a>，<a href="http://www.oracle.com/technetwork/database/berkeleydb/overview/index.html">bdb</a>支持队列方式的数据存储，只不过一个record必须fixed-length，具体能存多大的长度，我没再官方的doc中找到，不过，<a href="http://memcachedb.org/memcacheq/">memcacheq</a>作者说最大消息长度不能超过64K，而且，如果你超过了64K，消息队列就挂了，嗯，这个我碰到过了，超过64K，存入消息队列之后，整个消息队列就得重启。所以，如果你不确定以后业务变更会增加消息体的大小，那么我不建议你使用<a href="http://memcachedb.org/memcacheq/">memcacheq</a> :) 。</p>

<p><a href="http://memcachedb.org/memcacheq/">memcacheq</a>在内存里维护一个队列的hash，memcacheq.c文件实现了memcached协议，bdb.c文件实现了对于bdb的读写，发觉消息队列持久化用bdb实现实在是很轻量、很简洁，item.c对协议层的封装，操作结构体item。</p>

<p>用<a href="http://libevent.org/">libevent</a>对收到的通信包做callback，包括对bdb做增、删、存操作。bdb也用<a href="http://libevent.org/">libevent</a>，对<a href="http://libevent.org/">libevent</a>没有研究，略过N字 :)。</p>

<p>ps&nbsp;<a href="http://memcachedb.org/memcacheq/">memcacheq</a>测试使用的是python写的memcache.py。</p>

<p>简单，有效的持久化消息队列，性能过得去，抽空我得好好看看C语言，学习一下 :) 复习一下数据结构，以前的早忘记了，而且也没怎么好好学。老外写的<a href="http://book.douban.com/subject/1139336/">《C语言程序设计》</a>这本，不错的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[memcached protocol]]></title>
    <link href="http://ikurten.com/blog/2011/11/27/memcached-protocol/"/>
    <updated>2011-11-27T05:56:29+08:00</updated>
    <id>http://ikurten.com/blog/2011/11/27/memcached-protocol</id>
    <content type="html"><![CDATA[<p>Protocol</p>

<hr />

<p>Clients of memcached communicate with server through TCP connections.</p>

<p>(A UDP interface is also available; details are below under &#8220;UDP</p>

<p>protocol.&#8221;) A given running memcached server listens on some</p>

<p>(configurable) port; clients connect to that port, send commands to</p>

<p>the server, read responses, and eventually close the connection.</p>

<p>There is no need to send any command to end the session. A client may</p>

<p>just close the connection at any moment it no longer needs it. Note,</p>

<p>however, that clients are encouraged to cache their connections rather</p>

<p>than reopen them every time they need to store or retrieve data.&nbsp; This</p>

<p>is because memcached is especially designed to work very efficiently</p>

<p>with a very large number (many hundreds, more than a thousand if</p>

<p>necessary) of open connections. Caching connections will eliminate the</p>

<p>overhead associated with establishing a TCP connection (the overhead</p>

<p>of preparing for a new connection on the server side is insignificant</p>

<p>compared to this).</p>

<p>There are two kinds of data sent in the memcache protocol: text lines</p>

<p>and unstructured data.&nbsp; Text lines are used for commands from clients</p>

<p>and responses from servers. Unstructured data is sent when a client</p>

<p>wants to store or retrieve data. The server will transmit back</p>

<p>unstructured data in exactly the same way it received it, as a byte</p>

<p>stream. The server doesn&#8217;t care about byte order issues in</p>

<p>unstructured data and isn&#8217;t aware of them. There are no limitations on</p>

<p>characters that may appear in unstructured data; however, the reader</p>

<p>of such data (either a client or a server) will always know, from a</p>

<p>preceding text line, the exact length of the data block being</p>

<p>transmitted.</p>

<p>Text lines are always terminated by \r\n. Unstructured data is <em>also</em></p>

<p>terminated by \r\n, even though \r, \n or any other 8-bit characters</p>

<p>may also appear inside the data. Therefore, when a client retrieves</p>

<p>data from a server, it must use the length of the data block (which it</p>

<p>will be provided with) to determine where the data block ends, and not</p>

<p>the fact that \r\n follows the end of the data block, even though it</p>

<p>does.</p>

<p>Keys</p>

<hr />

<p>Data stored by memcached is identified with the help of a key. A key</p>

<p>is a text string which should uniquely identify the data for clients</p>

<p>that are interested in storing and retrieving it.&nbsp; Currently the</p>

<p>length limit of a key is set at 250 characters (of course, normally</p>

<p>clients wouldn&#8217;t need to use such long keys); the key must not include</p>

<p>control characters or whitespace.</p>

<p>Commands</p>

<hr />

<p>There are three types of commands.</p>

<p>Storage commands (there are six: &#8220;set&#8221;, &#8220;add&#8221;, &#8220;replace&#8221;, &#8220;append&#8221;</p>

<p>&#8220;prepend&#8221; and &#8220;cas&#8221;) ask the server to store some data identified by a key. The</p>

<p>client sends a command line, and then a data block; after that the</p>

<p>client expects one line of response, which will indicate success or</p>

<p>faulure.</p>

<p>Retrieval commands (there are two: &#8220;get&#8221; and &#8220;gets&#8221;) ask the server to</p>

<p>retrieve data corresponding to a set of keys (one or more keys in one</p>

<p>request). The client sends a command line, which includes all the</p>

<p>requested keys; after that for each item the server finds it sends to</p>

<p>the client one response line with information about the item, and one</p>

<p>data block with the item&#8217;s data; this continues until the server</p>

<p>finished with the &#8220;END&#8221; response line.</p>

<p>All other commands don&#8217;t involve unstructured data. In all of them,</p>

<p>the client sends one command line, and expects (depending on the</p>

<p>command) either one line of response, or several lines of response</p>

<p>ending with &#8220;END&#8221; on the last line.</p>

<p>A command line always starts with the name of the command, followed by</p>

<p>parameters (if any) delimited by whitespace. Command names are</p>

<p>lower-case and are case-sensitive.</p>

<p>Expiration times</p>

<hr />

<p>Some commands involve a client sending some kind of expiration time</p>

<p>(relative to an item or to an operation requested by the client) to</p>

<p>the server. In all such cases, the actual value sent may either be</p>

<p>Unix time (number of seconds since January 1, 1970, as a 32-bit</p>

<p>value), or a number of seconds starting from current time. In the</p>

<p>latter case, this number of seconds may not exceed 60<em>60</em>24*30 (number</p>

<p>of seconds in 30 days); if the number sent by a client is larger than</p>

<p>that, the server will consider it to be real Unix time value rather</p>

<p>than an offset from current time.</p>

<p>Error strings</p>

<hr />

<p>Each command sent by a client may be answered with an error string</p>

<p>from the server. These error strings come in three types:</p>

<ul>
<li>&#8220;ERROR\r\n&#8221;</li>
</ul>


<p>means the client sent a nonexistent command name.</p>

<ul>
<li>&#8220;CLIENT_ERROR <error>\r\n&#8221;</li>
</ul>


<p>means some sort of client error in the input line, i.e. the input</p>

<p>doesn&#8217;t conform to the protocol in some way. <error> is a</p>

<p>human-readable error string.</p>

<ul>
<li>&#8220;SERVER_ERROR <error>\r\n&#8221;</li>
</ul>


<p>means some sort of server error prevents the server from carrying</p>

<p>out the command. <error> is a human-readable error string. In cases</p>

<p>of severe server errors, which make it impossible to continue</p>

<p>serving the client (this shouldn&#8217;t normally happen), the server will</p>

<p>close the connection after sending the error line. This is the only</p>

<p>case in which the server closes a connection to a client.</p>

<p>In the descriptions of individual commands below, these error lines</p>

<p>are not again specifically mentioned, but clients must allow for their</p>

<p>possibility.</p>

<p>Storage commands</p>

<hr />

<p>First, the client sends a command line which looks like this:</p>

<p><command name> <key> <flags> <exptime> <bytes> [noreply]\r\n</p>

<p>cas <key> <flags> <exptime> <bytes> <cas unqiue> [noreply]\r\n</p>

<ul>
<li><command name> is &#8220;set&#8221;, &#8220;add&#8221;, &#8220;replace&#8221;, &#8220;append&#8221; or &#8220;prepend&#8221;</li>
</ul>


<p>&#8220;set&#8221; means &#8220;store this data&#8221;.</p>

<p>&#8220;add&#8221; means &#8220;store this data, but only if the server <em>doesn&#8217;t</em> already</p>

<p>hold data for this key&#8221;.</p>

<p>&#8220;replace&#8221; means &#8220;store this data, but only if the server <em>does</em></p>

<p>already hold data for this key&#8221;.</p>

<p>&#8220;append&#8221; means &#8220;add this data to an existing key after existing data&#8221;.</p>

<p>&#8220;prepend&#8221; means &#8220;add this data to an existing key before existing data&#8221;.</p>

<p>The append and prepend commands do not accept flags or exptime.</p>

<p>They update existing data portions, and ignore new flag and exptime</p>

<p>settings.</p>

<p>&#8220;cas&#8221; is a check and set operation which means &#8220;store this data but</p>

<p>only if no one else has updated since I last fetched it.&#8221;</p>

<ul>
<li><p><key> is the key under which the client asks to store the data</p></li>
<li><p><flags> is an arbitrary 16-bit unsigned integer (written out in</p></li>
</ul>


<p>decimal) that the server stores along with the data and sends back</p>

<p>when the item is retrieved. Clients may use this as a bit field to</p>

<p>store data-specific information; this field is opaque to the server.</p>

<p>Note that in memcached 1.2.1 and higher, flags may be 32-bits, instead</p>

<p>of 16, but you might want to restrict yourself to 16 bits for</p>

<p>compatibility with older versions.</p>

<ul>
<li><exptime> is expiration time. If it&#8217;s 0, the item never expires</li>
</ul>


<p>(although it may be deleted from the cache to make place for other</p>

<p>items). If it&#8217;s non-zero (either Unix time or offset in seconds from</p>

<p>current time), it is guaranteed that clients will not be able to</p>

<p>retrieve this item after the expiration time arrives (measured by</p>

<p>server time).</p>

<ul>
<li><bytes> is the number of bytes in the data block to follow, <em>not</em></li>
</ul>


<p>including the delimiting \r\n. <bytes> may be zero (in which case</p>

<p>it&#8217;s followed by an empty data block).</p>

<ul>
<li><cas unique> is a unique 64-bit value of an existing entry.</li>
</ul>


<p>Clients should use the value returned from the &#8220;gets&#8221; command</p>

<p>when issuing &#8220;cas&#8221; updates.</p>

<ul>
<li>&#8220;noreply&#8221; optional parameter instructs the server to not send the</li>
</ul>


<p>reply.&nbsp; NOTE: if the request line is malformed, the server can&#8217;t</p>

<p>parse &#8220;noreply&#8221; option reliably.&nbsp; In this case it may send the error</p>

<p>to the client, and not reading it on the client side will break</p>

<p>things.&nbsp; Client should construct only valid requests.</p>

<p>After this line, the client sends the data block:</p>

<p><data block>\r\n</p>

<ul>
<li><data block> is a chunk of arbitrary 8-bit data of length <bytes></li>
</ul>


<p>from the previous line.</p>

<p>After sending the command line and the data blockm the client awaits</p>

<p>the reply, which may be:</p>

<ul>
<li><p>&#8220;STORED\r\n&#8221;, to indicate success.</p></li>
<li><p>&#8220;NOT_STORED\r\n&#8221; to indicate the data was not stored, but not</p></li>
</ul>


<p>because of an error. This normally means that either that the</p>

<p>condition for an &#8220;add&#8221; or a &#8220;replace&#8221; command wasn&#8217;t met, or that the</p>

<p>item is in a delete queue (see the &#8220;delete&#8221; command below).</p>

<ul>
<li>&#8220;EXISTS\r\n&#8221; to indicate that the item you are trying to store with</li>
</ul>


<p>a &#8220;cas&#8221; command has been modified since you last fetched it.</p>

<ul>
<li>&#8220;NOT_FOUND\r\n&#8221; to indicate that the item you are trying to store</li>
</ul>


<p>with a &#8220;cas&#8221; command did not exist or has been deleted.</p>

<p>Retrieval command:</p>

<hr />

<p>The retrieval commands &#8220;get&#8221; and &#8220;gets&#8221; operates like this:</p>

<p>get <key>*\r\n</p>

<p>gets <key>*\r\n</p>

<ul>
<li><key>* means one or more key strings separated by whitespace.</li>
</ul>


<p>After this command, the client expects zero or more items, each of</p>

<p>which is received as a text line followed by a data block. After all</p>

<p>the items have been transmitted, the server sends the string</p>

<p>&#8220;END\r\n&#8221;</p>

<p>to indicate the end of response.</p>

<p>Each item sent by the server looks like this:</p>

<p>VALUE <key> <flags> <bytes> [<cas unique>]\r\n</p>

<p><data block>\r\n</p>

<ul>
<li><p><key> is the key for the item being sent</p></li>
<li><p><flags> is the flags value set by the storage command</p></li>
<li><p><bytes> is the length of the data block to follow, <em>not</em> including</p></li>
</ul>


<p>its delimiting \r\n</p>

<ul>
<li><cas unique> is a unique 64-bit integer that uniquely identifies</li>
</ul>


<p>this specific item.</p>

<ul>
<li><data block> is the data for this item.</li>
</ul>


<p>If some of the keys appearing in a retrieval request are not sent back</p>

<p>by the server in the item list this means that the server does not</p>

<p>hold items with such keys (because they were never stored, or stored</p>

<p>but deleted to make space for more items, or expired, or explicitly</p>

<p>deleted by a client).</p>

<p>Deletion</p>

<hr />

<p>The command &#8220;delete&#8221; allows for explicit deletion of items:</p>

<p>delete <key> [<time>] [noreply]\r\n</p>

<ul>
<li><p><key> is the key of the item the client wishes the server to delete</p></li>
<li><p><time> is the amount of time in seconds (or Unix time until which)</p></li>
</ul>


<p>the client wishes the server to refuse &#8220;add&#8221; and &#8220;replace&#8221; commands</p>

<p>with this key. For this amount of item, the item is put into a</p>

<p>delete queue, which means that it won&#8217;t possible to retrieve it by</p>

<p>the &#8220;get&#8221; command, but &#8220;add&#8221; and &#8220;replace&#8221; command with this key</p>

<p>will also fail (the &#8220;set&#8221; command will succeed, however). After the</p>

<p>time passes, the item is finally deleted from server memory.</p>

<p>The parameter <time> is optional, and, if absent, defaults to 0</p>

<p>(which means that the item will be deleted immediately and further</p>

<p>storage commands with this key will succeed).</p>

<ul>
<li>&#8220;noreply&#8221; optional parameter instructs the server to not send the</li>
</ul>


<p>reply.&nbsp; See the note in Storage commands regarding malformed</p>

<p>requests.</p>

<p>The response line to this command can be one of:</p>

<ul>
<li><p>&#8220;DELETED\r\n&#8221; to indicate success</p></li>
<li><p>&#8220;NOT_FOUND\r\n&#8221; to indicate that the item with this key was not</p></li>
</ul>


<p>found.</p>

<p>See the &#8220;flush_all&#8221; command below for immediate invalidation</p>

<p>of all existing items.</p>

<p>Increment/Decrement</p>

<hr />

<p>Commands &#8220;incr&#8221; and &#8220;decr&#8221; are used to change data for some item</p>

<p>in-place, incrementing or decrementing it. The data for the item is</p>

<p>treated as decimal representation of a 64-bit unsigned integer. If the</p>

<p>current data value does not conform to such a representation, the</p>

<p>commands behave as if the value were 0. Also, the item must already</p>

<p>exist for incr/decr to work; these commands won&#8217;t pretend that a</p>

<p>non-existent key exists with value 0; instead, they will fail.</p>

<p>The client sends the command line:</p>

<p>incr <key> <value> [noreply]\r\n</p>

<p>or</p>

<p>decr <key> <value> [noreply]\r\n</p>

<ul>
<li><p><key> is the key of the item the client wishes to change</p></li>
<li><p><value> is the amount by which the client wants to increase/decrease</p></li>
</ul>


<p>the item. It is a decimal representation of a 64-bit unsigned integer.</p>

<ul>
<li>&#8220;noreply&#8221; optional parameter instructs the server to not send the</li>
</ul>


<p>reply.&nbsp; See the note in Storage commands regarding malformed</p>

<p>requests.</p>

<p>The response will be one of:</p>

<ul>
<li><p>&#8220;NOT_FOUND\r\n&#8221; to indicate the item with this value was not found</p></li>
<li><p><value>\r\n , where <value> is the new value of the item&#8217;s data,</p></li>
</ul>


<p>after the increment/decrement operation was carried out.</p>

<p>Note that underflow in the &#8220;decr&#8221; command is caught: if a client tries</p>

<p>to decrease the value below 0, the new value will be 0.&nbsp; Overflow in</p>

<p>the &#8220;incr&#8221; command will wrap around the 64 bit mark.</p>

<p>Note also that decrementing a number such that it loses length isn&#8217;t</p>

<p>guaranteed to decrement its returned length.&nbsp; The number MAY be</p>

<p>space-padded at the end, but this is purely an implementation</p>

<p>optimization, so you also shouldn&#8217;t rely on that.</p>

<p>Statistics</p>

<hr />

<p>The command &#8220;stats&#8221; is used to query the server about statistics it</p>

<p>maintains and other internal data. It has two forms. Without</p>

<p>arguments:</p>

<p>stats\r\n</p>

<p>it causes the server to output general-purpose statistics and</p>

<p>settings, documented below.&nbsp; In the other form it has some arguments:</p>

<p>stats <args>\r\n</p>

<p>Depending on <args>, various internal data is sent by the server. The</p>

<p>kinds of arguments and the data sent are not documented in this vesion</p>

<p>of the protocol, and are subject to change for the convenience of</p>

<p>memcache developers.</p>

<p>General-purpose statistics</p>

<hr />

<p>Upon receiving the &#8220;stats&#8221; command without arguments, the server sents</p>

<p>a number of lines which look like this:</p>

<p>STAT <name> <value>\r\n</p>

<p>The server terminates this list with the line</p>

<p>END\r\n</p>

<p>In each line of statistics, <name> is the name of this statistic, and</p>

<p><value> is the data.&nbsp; The following is the list of all names sent in</p>

<p>response to the &#8220;stats&#8221; command, together with the type of the value</p>

<p>sent for this name, and the meaning of the value.</p>

<p>In the type column below, &#8220;32u&#8221; means a 32-bit unsigned integer, &#8220;64u&#8221;</p>

<p>means a 64-bit unsigner integer. &#8216;32u:32u&#8217; means two 32-but unsigned</p>

<p>integers separated by a colon.</p>

<p>Name&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Type &nbsp; &nbsp; Meaning</p>

<hr />

<p>pid &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 32u&nbsp; &nbsp; &nbsp; Process id of this server process</p>

<p>uptime&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 32u&nbsp; &nbsp; &nbsp; Number of seconds this server has been running</p>

<p>time&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 32u&nbsp; &nbsp; &nbsp; current UNIX time according to the server</p>

<p>version &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; string &nbsp; Version string of this server</p>

<p>pointer_size&nbsp; &nbsp; &nbsp; 32 &nbsp; &nbsp; &nbsp; Default size of pointers on the host OS</p>

<p>(generally 32 or 64)</p>

<p>rusage_user &nbsp; &nbsp; &nbsp; 32u:32u&nbsp; Accumulated user time for this process</p>

<p>(seconds:microseconds)</p>

<p>rusage_system &nbsp; &nbsp; 32u:32u&nbsp; Accumulated system time for this process</p>

<p>(seconds:microseconds)</p>

<p>curr_items&nbsp; &nbsp; &nbsp; &nbsp; 32u&nbsp; &nbsp; &nbsp; Current number of items stored by the server</p>

<p>total_items &nbsp; &nbsp; &nbsp; 32u&nbsp; &nbsp; &nbsp; Total number of items stored by this server</p>

<p>ever since it started</p>

<p>bytes &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 64u&nbsp; &nbsp; &nbsp; Current number of bytes used by this server</p>

<p>to store items</p>

<p>curr_connections&nbsp; 32u&nbsp; &nbsp; &nbsp; Number of open connections</p>

<p>total_connections 32u&nbsp; &nbsp; &nbsp; Total number of connections opened since</p>

<p>the server started running</p>

<p>connection_structures 32u&nbsp; Number of connection structures allocated</p>

<p>by the server</p>

<p>cmd_get &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 64u&nbsp; &nbsp; &nbsp; Cumulative number of retrieval requests</p>

<p>cmd_set &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 64u&nbsp; &nbsp; &nbsp; Cumulative number of storage requests</p>

<p>get_hits&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 64u&nbsp; &nbsp; &nbsp; Number of keys that have been requested and</p>

<p>found present</p>

<p>get_misses&nbsp; &nbsp; &nbsp; &nbsp; 64u&nbsp; &nbsp; &nbsp; Number of items that have been requested</p>

<p>and not found</p>

<p>evictions &nbsp; &nbsp; &nbsp; &nbsp; 64u&nbsp; &nbsp; &nbsp; Number of valid items removed from cache</p>

<p>to free memory for new items</p>

<p>bytes_read&nbsp; &nbsp; &nbsp; &nbsp; 64u&nbsp; &nbsp; &nbsp; Total number of bytes read by this server</p>

<p>from network</p>

<p>bytes_written &nbsp; &nbsp; 64u&nbsp; &nbsp; &nbsp; Total number of bytes sent by this server to</p>

<p>network</p>

<p>limit_maxbytes&nbsp; &nbsp; 32u&nbsp; &nbsp; &nbsp; Number of bytes this server is allowed to</p>

<p>use for storage.</p>

<p>threads &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 32u&nbsp; &nbsp; &nbsp; Number of worker threads requested.</p>

<p>(see doc/threads.txt)</p>

<p>Item statistics</p>

<hr />

<p>CAVEAT: This section describes statistics which are subject to change in the</p>

<p>future.</p>

<p>The &#8220;stats&#8221; command with the argument of &#8220;items&#8221; returns information about</p>

<p>item storage per slab class. The data is returned in the format:</p>

<p>STAT items:<slabclass>:<stat> <value>\r\n</p>

<p>The server terminates this list with the line</p>

<p>END\r\n</p>

<p>The slabclass aligns with class ids used by the &#8220;stats slabs&#8221; command. Where</p>

<p>&#8220;stats slabs&#8221; describes size and memory usage, &#8220;stats items&#8221; shows higher</p>

<p>level information.</p>

<p>The following item values are defined as of writing.</p>

<p>Name &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Meaning</p>

<hr />

<p>number &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Number of items presently stored in this class. Expired</p>

<p>items are not automatically excluded.</p>

<p>age&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Age of the oldest item in the LRU.</p>

<p>evicted&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Number of times an item had to be evicted from the LRU</p>

<p>before it expired.</p>

<p>outofmemory&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Number of times the underlying slab class was unable to</p>

<p>store a new item. This means you are running with -M or</p>

<p>an eviction failed.</p>

<p>Note this will only display information about slabs which exist, so an empty</p>

<p>cache will return an empty set.</p>

<p>Item size statistics</p>

<hr />

<p>CAVEAT: This section describes statistics which are subject to change in the</p>

<p>future.</p>

<p>The &#8220;stats&#8221; command with the argument of &#8220;sizes&#8221; returns information about the</p>

<p>general size and count of all items stored in the cache.</p>

<p>WARNING: This command WILL lock up your cache! It iterates over <em>every item</em></p>

<p>and examines the size. While the operation is fast, if you have many items</p>

<p>you could prevent memcached from serving requests for several seconds.</p>

<p>The data is returned in the following format:</p>

<p><size> <count>\r\n</p>

<p>The server terminates this list with the line</p>

<p>END\r\n</p>

<p>&#8216;size&#8217; is an approximate size of the item, within 32 bytes.</p>

<p>&#8216;count&#8217; is the amount of items that exist within that 32-byte range.</p>

<p>This is essentially a display of all of your items if there was a slab class</p>

<p>for every 32 bytes. You can use this to determine if adjusting the slab growth</p>

<p>factor would save memory overhead. For example: generating more classes in the</p>

<p>lower range could allow items to fit more snugly into their slab classes, if</p>

<p>most of your items are less than 200 bytes in size.</p>

<p>Slab statistics</p>

<hr />

<p>CAVEAT: This section describes statistics which are subject to change in the</p>

<p>future.</p>

<p>The &#8220;stats&#8221; command with the argument of &#8220;slabs&#8221; returns information about</p>

<p>each of the slabs created by memcached during runtime. This includes per-slab</p>

<p>information along with some totals. The data is returned in the format:</p>

<p>STAT <slabclass>:<stat> <value>\r\n</p>

<p>STAT <stat> <value>\r\n</p>

<p>The server terminates this list with the line</p>

<p>END\r\n</p>

<p>Name &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Meaning</p>

<hr />

<p>chunk_size &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; The amount of space each chunk uses. One item will use</p>

<p>one chunk of the appropriate size.</p>

<p>chunks_per_page&nbsp; &nbsp; &nbsp; &nbsp; How many chunks exist within one page. A page by</p>

<p>default is one megabyte in size. Slabs are allocated per</p>

<p>page, then broken into chunks.</p>

<p>total_pages&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Total number of pages allocated to the slab class.</p>

<p>total_chunks &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Total number of chunks allocated to the slab class.</p>

<p>used_chunks&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; How many chunks have been allocated to items.</p>

<p>free_chunks&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Chunks not yet allocated to items, or freed via delete.</p>

<p>free_chunks_end&nbsp; &nbsp; &nbsp; &nbsp; Number of free chunks at the end of the last allocated</p>

<p>page.</p>

<p>active_slabs &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Total number of slab classes allocated.</p>

<p>total_malloced &nbsp; &nbsp; &nbsp; &nbsp; Total amount of memory allocated to slab pages.</p>

<p>Other commands</p>

<hr />

<p>&#8220;flush_all&#8221; is a command with an optional numeric argument. It always</p>

<p>succeeds, and the server sends &#8220;OK\r\n&#8221; in response (unless &#8220;noreply&#8221;</p>

<p>is given as the last parameter). Its effect is to invalidate all</p>

<p>existing items immediately (by default) or after the expiration</p>

<p>specified.&nbsp; After invalidation none of the items will be returned in</p>

<p>response to a retrieval command (unless it&#8217;s stored again under the</p>

<p>same key <em>after</em> flush_all has invalidated the items). flush_all</p>

<p>doesn&#8217;t actually free all the memory taken up by existing items; that</p>

<p>will happen gradually as new items are stored. The most precise</p>

<p>definition of what flush_all does is the following: it causes all</p>

<p>items whose update time is earlier than the time at which flush_all</p>

<p>was set to be executed to be ignored for retrieval purposes.</p>

<p>The intent of flush_all with a delay, was that in a setting where you</p>

<p>have a pool of memcached servers, and you need to flush all content,</p>

<p>you have the option of not resetting all memcached servers at the</p>

<p>same time (which could e.g. cause a spike in database load with all</p>

<p>clients suddenly needing to recreate content that would otherwise</p>

<p>have been found in the memcached daemon).</p>

<p>The delay option allows you to have them reset in e.g. 10 second</p>

<p>intervals (by passing 0 to the first, 10 to the second, 20 to the</p>

<p>third, etc. etc.).</p>

<p>&#8220;version&#8221; is a command with no arguments:</p>

<p>version\r\n</p>

<p>In response, the server sends&nbsp;&#8220;VERSION <version>\r\n&#8221;, where <version> is the version string for the</p>

<p>server.</p>

<p>&#8220;verbosity&#8221; is a command with a numeric argument. It always succeeds,</p>

<p>and the server sends &#8220;OK\r\n&#8221; in response (unless &#8220;noreply&#8221; is given</p>

<p>as the last parameter). Its effect is to set the verbosity level of</p>

<p>the logging output.</p>

<p>&#8220;quit&#8221; is a command with no arguments:</p>

<p>quit\r\n</p>

<p>Upon receiving this command, the server closes the</p>

<p>connection. However, the client may also simply close the connection</p>

<p>when it no longer needs it, without issuing this command.</p>

<p>UDP protocol</p>

<hr />

<p>For very large installations where the number of clients is high enough</p>

<p>that the number of TCP connections causes scaling difficulties, there is</p>

<p>also a UDP-based interface. The UDP interface does not provide guaranteed</p>

<p>delivery, so should only be used for operations that aren&#8217;t required to</p>

<p>succeed; typically it is used for &#8220;get&#8221; requests where a missing or</p>

<p>incomplete response can simply be treated as a cache miss.</p>

<p>Each UDP datagram contains a simple frame header, followed by data in the</p>

<p>same format as the TCP protocol described above. In the current</p>

<p>implementation, requests must be contained in a single UDP datagram, but</p>

<p>responses may span several datagrams. (The only common requests that would</p>

<p>span multiple datagrams are huge multi-key &#8220;get&#8221; requests and &#8220;set&#8221;</p>

<p>requests, both of which are more suitable to TCP transport for reliability</p>

<p>reasons anyway.)</p>

<p>The frame header is 8 bytes long, as follows (all values are 16-bit integers</p>

<p>in network byte order, high byte first):</p>

<p>0-1 Request ID</p>

<p>2-3 Sequence number</p>

<p>4-5 Total number of datagrams in this message</p>

<p>6-7 Reserved for future use; must be 0</p>

<p>The request ID is supplied by the client. Typically it will be a</p>

<p>monotonically increasing value starting from a random seed, but the client</p>

<p>is free to use whatever request IDs it likes. The server&#8217;s response will</p>

<p>contain the same ID as the incoming request. The client uses the request ID</p>

<p>to differentiate between responses to outstanding requests if there are</p>

<p>several pending from the same server; any datagrams with an unknown request</p>

<p>ID are probably delayed responses to an earlier request and should be</p>

<p>discarded.</p>

<p>The sequence number ranges from 0 to n-1, where n is the total number of</p>

<p>datagrams in the message. The client should concatenate the payloads of the</p>

<p>datagrams for a given response in sequence number order; the resulting byte</p>

<p>stream will contain a complete response in the same format as the TCP</p>

<p>protocol (including terminating \r\n sequences).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[911絮叨]]></title>
    <link href="http://ikurten.com/blog/2011/09/11/911/"/>
    <updated>2011-09-11T02:35:51+08:00</updated>
    <id>http://ikurten.com/blog/2011/09/11/911</id>
    <content type="html"><![CDATA[<p>忽然发觉啊，年纪大了，总增添了点懒惰。人，也经常性得感觉到疲乏。搞技术的，似乎大多都这样吧。有时候，想做的事情，会不了了之。当然，也慢慢习惯了，一休息就宅着。于是，又增加了惰性。到现在，总觉着有点亏欠这点时光了啊。不过有时候，也会翻翻老黄历，怀念怀念过去的那点时光。人生在世的，总是走走停停，停停走走。</p>

<p>从毕业到现在，手头是增加了很多数码产品，我么，也逐渐成为果粉。不过，话又说回来，苹果的产品确实做得不错！记得11年前，刚上初中那会，表姐把她那台用剩下得电脑给了我，于是，就有了第一台电脑。当时也没怎么细想，就觉着，那电脑太烂了。也没怎么用，就开了三次机，之后就再也没去搭理它了。等到很长一段时间之后，才明白，当时如果多折腾折腾，现在应该会好很多。</p>

<p>上初中那会，听说老美双子大楼被炸了，还是有点不太相信的，死了很多人啊。死人这种事情总是不太愿意听到或者看到的。</p>

<p>回想刚上初中那会，每天骑车30分钟上下学，都不知道我是怎么坚持下来的。现在为了生计，还是这样，其实10年对我来说都一样，只不过，年纪大了，看过了很多，了解了很多，同时也学到了很多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试ifttt]]></title>
    <link href="http://ikurten.com/blog/2011/08/03/test-ifttt/"/>
    <updated>2011-08-03T03:09:18+08:00</updated>
    <id>http://ikurten.com/blog/2011/08/03/test-ifttt</id>
    <content type="html"><![CDATA[<p>测试ifttt，你懂的。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql主从配置]]></title>
    <link href="http://ikurten.com/blog/2011/08/02/mysql-master-slave/"/>
    <updated>2011-08-02T00:37:49+08:00</updated>
    <id>http://ikurten.com/blog/2011/08/02/mysql-master-slave</id>
    <content type="html"><![CDATA[<p>mysql由于其cluster没有很好得解决方案，所以没有被广泛的使用。使用最广的还是mysql的主从备份，从而读写分离。mysql 5.5版本的主从replication性能还是相当不错的，下面是配置方法（昨天刚在两台测试服务器中尝试，记录一下）。参考<a href="http://dev.mysql.com/doc/refman/5.0/en/replication-howto.html">官方手册</a>。</p>

<p>1、安装mysql（此处省略N字。。。）</p>

<p>2、因为我配的是服务器，所以我使用了mysql-large.cnf文件作为/etc/my.cnf。</p>

<p>3、在my.cnf中([mysqld] 下面)</p>

<pre>[mysqld]
log-bin=mysql-bin
server-id=1</pre>


<p>当然如果你要使用innodb事务支持，那就的加上这两个参数配置 innodb_flush_log_at_trx_commit=1 和 sync_binlog=1。同时确保skip-networking没有启用，否则所有slave都无法连接master<code>。</code></p>

<p>重启mysql。</p>

<p>4、配置slave，重复 2。</p>

<p>5、在my.cnf中([mysqld] 下面)</p>

<pre>[mysqld]
server-id=2  #如果有多台slave，那么每台得id都必须唯一</pre>


<p>重启mysql。</p>

<p>6、在master中新建用于replication的用户</p>

<pre>mysql> CREATE USER 'repl'@'%.mydomain.com' IDENTIFIED BY 'slavepass';
mysql> GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%.mydomain.com';</pre>


<p>7、在slave中执行</p>

<pre>mysql> CHANGE MASTER TO
    ->     MASTER_HOST='master_host_name',
    ->     MASTER_USER='replication_user_name',
    ->     MASTER_PASSWORD='replication_password',
    ->     MASTER_LOG_FILE='recorded_log_file_name',
    ->     MASTER_LOG_POS=recorded_log_position;</pre>


<pre>change master to master_host='192.168.1.194', master_user='admin',
master_password='000000', master_log_file='mysql-bin.000001',
master_log_pos=268;</pre>


<p>再执行 start slave;
查看一下slave的状态：show slave status\G;
如果Slave_IO_Running 和 Slave_SQL_Running 两列的值都为 &ldquo;Yes&rdquo;，之后，你在master中新建数据库神马的操作，就会自动同步至slave中了。</p>

<p>mysql修改密码，如果采用sql方式更新user表，需要使用 flush privileges; 命令启用新密码。</p>

<p>创建用户</p>

<pre>create user 'username'@'localhost' IDENTIFIED BY 'password';</pre>


<p>设置用户权限</p>

<pre>GRANT ALL PRIVILEGES ON *.* TO kkk@"%" IDENTIFIED BY '000000' WITH
GRANT OPTION;</pre>


<p>移除权限</p>

<pre>revoke all on openfire.* from username@'localhost';</pre>


<p>添加字段</p>

<pre>alter table test add column ttt varchar(12);</pre>


<p>修改字段名称</p>

<pre>alter table test change ttt newttt varchar(12);</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于癌症]]></title>
    <link href="http://ikurten.com/blog/2011/07/29/cancer/"/>
    <updated>2011-07-29T10:13:53+08:00</updated>
    <id>http://ikurten.com/blog/2011/07/29/cancer</id>
    <content type="html"><![CDATA[<div id="_mcePaste"><span style="line-height: 24px;">昨晚接到一个朋友电话，让我整晚都睡不着。他说他父亲换了肺癌，而且还是晚期。于是，就瞒着父亲。接下去，就是回家，然后好好照料他父亲了。生老病死的，不过突然听到亲人换了绝症，还是难以置信的事情。于是，什么都做不了，除了在最后的一段时间里好好照顾他，还能做什么呢？</span></div>


<div><span style="line-height: 24px;">记录一下，以后多给父母打电话，多回回家。</span></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于memcacheq的记录]]></title>
    <link href="http://ikurten.com/blog/2011/07/29/memcacheq/"/>
    <updated>2011-07-29T04:03:25+08:00</updated>
    <id>http://ikurten.com/blog/2011/07/29/memcacheq</id>
    <content type="html"><![CDATA[<p>上个星期，因为项目需要，学习了一下<a href="http://memcachedb.org/memcacheq/" target="_blank">memcacheq</a>（一个持久化的消息队列），同时，写了一个定制性质的client（当然，协议还是用<a href="http://memcached.org/" target="_blank">memcached</a>的）。由于自身业务上面的需要，把这个client折腾成了可以根据配置进行扩展的方式。主要是针对业务处理消息的方法。</p>

<p>单纯的<a href="http://memcachedb.org/memcacheq/" target="_blank">memcacheq</a>、<a href="http://memcachedb.org/" target="_blank">memcachedb</a>、<a href="http://memcached.org/" target="_blank">memcached</a>其实都没有集群的能力，只是用于单机的。如果没有客户端，那么也算不得一个完整的东西。原先的client采用连接池的方式，用来继承扩展还是太过麻烦，于是就自己写了一个socket连接。连接协议摆在那，自己写一个还是相对轻松很多的。各个业务以及一个queue连接，采用线程的处理方式。这样的话，就需要对线程进行定时检查，防止线程处理过程中索死或者interrupted，这主要还是为了容错。</p>

<p>这次的后台架构，主要还是为了替换掉原先的基于xmpp的消息通信方式，消息丢失么，这是最讨厌的。虽然，我们的业务对于并发没有很高的要求，但是丢失这个问题，还是比较严重的，xmpp没有消息回执，所以时常会导致消息丢失。同时，它的clustering插件也太过于恶心，后续还是会被弃用的。</p>

<p>这星期么，去测试一下<a href="http://memcachedb.org/memcacheq/" target="_blank">memcacheq</a>多队列单机的性能，同时，深入学习一下<a href="http://memcachedb.org/memcacheq/" target="_blank">memcacheq</a>的源代码。阅读源代码确实可以学习到很多东西。特别是别人的逻辑，思路。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu编译安装php5.3.5]]></title>
    <link href="http://ikurten.com/blog/2011/07/29/ubuntu-install-php5-3-5/"/>
    <updated>2011-07-29T04:03:06+08:00</updated>
    <id>http://ikurten.com/blog/2011/07/29/ubuntu-install-php5-3-5</id>
    <content type="html"><![CDATA[<div></div>


<div>安装apache，mysql，mysql需要libmysqld-dev</div>


<div>sudo apt-get install libxml2-dev</div>


<div>sudo apt-get install libmysqld-dev</div>


<div>sudo apt-get install libbz2-dev</div>


<div>sudo apt-get install libcurl4-gnutls-dev</div>


<div>sudo apt-get install libmcrypt-dev</div>


<div></div>


<div>./configure &ndash;prefix=/usr/local/php5 &ndash;with-config-file-path=/usr/local/php5/etc &ndash;with-mysql &ndash;with-mysqli &ndash;enable-debug &ndash;with-pic &ndash;disable-rpath &ndash;without-pear &ndash;with-bz2 &ndash;with-apxs2=/usr/local/apache2/bin/apxs &ndash;with-freetype-dir &ndash;with-jpeg-dir &ndash;with-png-dir &ndash;with-zlib &ndash;with-libxml-dir &ndash;enable-xml &ndash;enable-debug &ndash;disable-rpath &ndash;enable-discard-path &ndash;enable-safe-mode &ndash;enable-bcmath &ndash;enable-shmop &ndash;enable-sysvsem &ndash;enable-inline-optimization &ndash;with-curl &ndash;with-curlwrappers &ndash;enable-mbregex &ndash;enable-fastcgi &ndash;enable-force-cgi-redirect &ndash;enable-mbstring &ndash;enable-soap &ndash;enable-sockets &ndash;with-mcrypt</div>


<div></div>


<div>sudo make</div>


<div>sudo make install</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于服务器端的学习记录]]></title>
    <link href="http://ikurten.com/blog/2011/07/29/server-learning/"/>
    <updated>2011-07-29T04:01:09+08:00</updated>
    <id>http://ikurten.com/blog/2011/07/29/server-learning</id>
    <content type="html"><![CDATA[<p>这个星期做了点事情，做了几个接口，大致了解了目前后台架构，以及一些设计方面的事情。后台主要是用java系的技术，<a href="http://tomcat.apache.org/" target="_blank">tomcat</a>做接口容器。实时消息这块主要由<a href="http://www.igniterealtime.org/projects/openfire/" target="_blank">openfire</a>去处理，基本上就是直接使用<a href="http://www.igniterealtime.org/projects/openfire/" target="_blank">openfire</a>的原有功能（除了clustering插件）。</p>

<p>整体的系统框架是用了<a href="http://www.springsource.org/" target="_blank">spring</a>+<a href="http://ibatis.apache.org/" target="_blank">ibatis</a>+<a href="http://struts.apache.org/" target="_blank">struts</a>。用<a href="http://www.springsource.org/" target="_blank">spring</a>控制（<a href="http://dev.csdn.net/htmls/24/24397.html" target="_blank">IoC</a>）整体的接口封装，业务逻辑实现。数据层使用<a href="http://ibatis.apache.org/" target="_blank">ibatis</a>做数据库映射。数据库目前使用<a href="http://www.mysql.com/" target="_blank">mysql</a>。</p>

<p>现在把<a href="http://tomcat.apache.org/" target="_blank">tomcat</a>，<a href="http://www.mysql.com/" target="_blank">mysql</a>，还有<a href="http://www.igniterealtime.org/projects/openfire/" target="_blank">openfire</a>架在一台服务器上，目前的<a href="http://www.igniterealtime.org/projects/openfire/" target="_blank">openfire</a>并发最高5000左右。网上看了一下，<a href="http://www.igniterealtime.org/projects/openfire/" target="_blank">openfire</a>并发具体可以支持多少也没啥具体介绍，官方也没有明确表示单<a href="http://www.igniterealtime.org/projects/openfire/" target="_blank">openfire</a>能支持多少的并发量。这个问题有待学习啊。还有就是，用户的消息数据会丢失，这个频率貌似还有点高。这个问题很纠结啊。</p>

<p>后续发展的话，<a href="http://tomcat.apache.org/" target="_blank">tomcat</a>，<a href="http://www.mysql.com/" target="_blank">mysql</a>，单独部署，然后<a href="http://www.igniterealtime.org/projects/openfire/" target="_blank">openfire</a>安装clustering插件进行集群（不过，这个也不是这么好部的，装上这个插件之后就不能使用了，哎）。消息丢失这块，也没啥好办法，引入消息队列或许可以减少丢失频率。</p>

<p>服务器端接口这块暂时还没有引入<a href="http://oauth.net/2/" target="_blank">oauth</a>机制。这个需要后续接入了。</p>

<p>然后再来说说前端，现在做的一些手机web前端页面也是我做的，用<a href="http://www.php.net/" target="_blank">php</a>+<a href="http://kurchan.com/jquerymobile.com" target="_blank">jquerymobile</a>框架。同时也学到了前端一些页面设计上的事。也算对于最近这段时间有个交代了。前端还是有很多事情做的。页面载入速度优化就可以引入很多问题。可以查看<a href="http://oreilly.com/catalog/9780596529307" target="_blank">high performance web sites</a>，谁看谁知道。web前端这方面yahoo做得还是挺牛的。嗯，把这本书看完！</p>

<p>后续学习目标(其实也就是看几本书)：</p>

<p>1、xmpp(XMPP The Definitive Guide)、openfire</p>

<p>2、spring框架、tomcat(Tomcat The Definitive Guide)</p>

<p>3、mysql(High Performance MySQL/Web Operations Keeping the Data On Time)</p>

<p>4、服务器性能优化(Operating Systems Design and Implementation/The Art of Computer Systems Performance Analysis Techniques)</p>

<p>5、js压缩（high performance web sites）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[流川枫与苍井空]]></title>
    <link href="http://ikurten.com/blog/2011/07/29/moview/"/>
    <updated>2011-07-29T04:00:21+08:00</updated>
    <id>http://ikurten.com/blog/2011/07/29/moview</id>
    <content type="html"><![CDATA[<p><embed src="http://player.youku.com/player.php/sid/XMjY5NTczMDk2/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>

<p>纪念该纪念的。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[这段时间]]></title>
    <link href="http://ikurten.com/blog/2011/07/29/recent-time/"/>
    <updated>2011-07-29T03:57:02+08:00</updated>
    <id>http://ikurten.com/blog/2011/07/29/recent-time</id>
    <content type="html"><![CDATA[<p>上星期加入了<a href="http://www.lianpu.com/" target="_blank">脸谱换换</a>创业团队，本来我是想去做web服务器端开发的，因为我么会点php于是折腾起了前端一些页面以及与后台接口调用神马的事情。工作状态，怎么说呢，感觉还好，我反正效率挺高的。可是啊，折腾发布这个事情可不是一般的纠结啊。每次都是发布之前过来看看，然后觉着神马要改了，然后修改。哎，你之前做神马去了？于是么，白天基本轻松，到晚上，哎。</p>

<p>潦草，太潦草了。产品先确定功能点，然后优化，嗯，这个很好。需求么？今天谈一下，明天谈一下，产品经理啊，悲崔！好么，昨天有人说，要做网站版本的脸谱换换，好哇，想法很好么，瞎扯淡。您这是做产品么？怎么神马都做？让<a href="http://www.path.com/" target="_blank">path</a>情何以堪啊！</p>

<p>前段时间做的产品记录么，哎，没时间继续做了。最近<a href="http://www.mogujie.com/" target="_blank">蘑菇街</a>改版了，功能简洁，舒适。不错的社交电子商务产品，继续看好之。</p>

<p>对于<a href="http://www.lianpu.com/" target="_blank">脸谱换换</a>产品的服务器端技术架构，等我弄熟了那些东西在做记录吧。现在写了也只是copy，没神马意思滴。主要用到的技术么，<a href="http://www.mysql.com/" target="_blank">mysql</a>、<a href="http://www.igniterealtime.org/projects/openfire/" target="_blank">openfire</a>（<a href="http://xmpp.org/" target="_blank">xmpp</a>的一个server实现）、基于java的<a href="http://www.springsource.org/" target="_blank">spring</a>、<a href="http://struts.apache.org/" target="_blank">struts</a>等等这些框架。</p>

<p>产品要做专，功能神马的，浮云啊，关键是需求点转化成功能的概率啊有多大！嗯，特别佩服毕加索，优秀的艺术家复制，伟大的艺术家偷。我么，继续stay hungry，stay foolish！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[美丽说功能点以及个人评估]]></title>
    <link href="http://ikurten.com/blog/2011/07/29/meilishuo/"/>
    <updated>2011-07-29T03:56:44+08:00</updated>
    <id>http://ikurten.com/blog/2011/07/29/meilishuo</id>
    <content type="html"><![CDATA[<p>美丽说功能点</p>

<p>一、我的首页</p>

<p>1）发表文字信息、图片、宝贝链接（可以同步至新浪、人人）。</p>

<p>2）查看关注的人发表、转发的内容（宝贝、照片等）。</p>

<p>3）看看大家&ndash;>未关注用户的发表、转发的内容（提供时时推送）。</p>

<p>还有一个就是&ldquo;去我的美丽说&rdquo;，进入后可以查看我发布的文字以及图片信息，以及我喜欢的分享。</p>

<p>对于发布信息这个模块来说，可以直接将功能集成，成为一个单纯的聊聊，其余冗余。&nbsp;这里，我感觉层次设计有问题，可能是导航菜单太少的缘故。&ldquo;我的首页&rdquo;或者可以修改成我的美丽说，这样既可以查看我已经发布的信息，进行修改，或者直接发布新的。</p>

<p>二、扮美达人</p>

<p>类似人气用户推荐，以及相应的人气用户列表查看。</p>

<p>选择人气用户后进入美丽说海报浏览模式，以照片为主。进入分享内容后显示照片、评论、转发功能，是否喜欢。</p>

<p>三、挑衣服</p>

<p>用户分享的照片列表（列表中居然会出现灯具等东西，真汗啊）。</p>

<p>同二描述。</p>

<p>四、当红好店</p>

<p>用户推荐的淘宝店铺（不知道他是如何折腾出这个用户推荐的淘宝店铺的，感觉这个流量转换率很低啊，没啥用啊）。</p>

<p>五、美丽Q&amp;A</p>

<p>简单的问答型BBS（分最新以及最受欢迎两个区）。</p>

<p>既然提供了支持功能，推送至最受欢迎区，那你就再做点好事，折腾个不支持功能呗。不然，我都支持一下，不是全放到最受欢迎那边去了？</p>

<p>六、团购</p>

<p>提供给淘宝卖家的团购平台，卖家可以自主提交团购产品。</p>

<p>评估</p>

<p>导航菜单该具备的居然省略了，页面层次组织不够明显，点击进入查看宝贝具体内容时找不着地方。不知道自己在浏览神马东西了。对比蘑菇街，这个设计体验明显是不同档次。还有就是对于字体，美丽说的字体与蘑菇街的字体（评论、以及描述的字体），对比一下，很明显的。优化空间很大啊。</p>

<p>这是今天的功课，明天继续。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[蘑菇街功能点以及个人评估]]></title>
    <link href="http://ikurten.com/blog/2011/07/29/mogujie/"/>
    <updated>2011-07-29T03:50:31+08:00</updated>
    <id>http://ikurten.com/blog/2011/07/29/mogujie</id>
    <content type="html"><![CDATA[<p>蘑菇街功能点</p>

<p>一、个人空间</p>

<p>1）&ldquo;我家首页&rdquo;：</p>

<p>1、商品实拍照片为主（可以多张照片），以及相应的商品描述，可以添加购买链接。</p>

<p>2、可以对该商品进行评价、转发。</p>

<p>3、可以加入自己喜欢的列表、同时分享。</p>

<p>4、列表显示分享者的其他分享内容。</p>

<p>5、二手闲置&mdash;-交易平台（接入第三方，支付宝），类似围脖的话题模式。</p>

<p>6、显示关注的用户所转发的、喜欢的、分享的内容。</p>

<p>7、用户账户设置等辅助功能。</p>

<p>我感觉 &ldquo;我家首页&rdquo;中功能点重复很多，&ldquo;随便聊聊&rdquo;可以直接发送商品、店铺链接或者直接上传图片，没必要再将其细分出来。</p>

<p>2）&ldquo;主题&rdquo;：</p>

<p>&ldquo;主题吧&rdquo;&mdash;-创建主题（BBS模式）后生成的内容。</p>

<p>3）&ldquo;相册&rdquo;：</p>

<p>上传、分享的自拍照片等图片。</p>

<p>4）&ldquo;宝贝&rdquo;：</p>

<p>上传、分享的商品照片。</p>

<p>5）&ldquo;喜欢&rdquo;：</p>

<p>点击喜欢按钮后存储的内容（用户分享的商品、或者自拍照等）。</p>

<p>二、购物分享</p>

<p>1）采用画报模式（以图片为主，显示描述，如果有评论，最多只显示2条）。</p>

<p>2）点击图片，显示分享主要内容，购买链接、图片、喜欢、评论、其他分享等。</p>

<p>评论按钮多余。</p>

<p>三、看实拍</p>

<p>1）商品购买后实际拍摄照片分享（用户搭配、描述等）。</p>

<p>2）以看画报模式为主（图片为主）。</p>

<p>四、找达人</p>

<p>显示粉丝多的、分享多的、人气旺的用户，比如评论多的等等。</p>

<p>五、淘闲置</p>

<p>如&ldquo;我家首页&rdquo;中二手闲置，接入支付宝担保交易平台。</p>

<p>六、主题吧</p>

<p>类似BBS模式，首先分不同主题：购物实拍、蘑菇自拍等等。再进行区分子主题：网购、实体等等。用户可以创建主题帖子。</p>

<p>评估</p>

<p>从整体上来说蘑菇街网站UI设计上比较舒服，让人感觉很清新（以绿色为主的缘故吧）。初步使用来看就可以了解，蘑菇街这个网站就是提供给买家、卖家分享购物商品的一个社交平台。从功能点进入相应的页面，信息呈现上面还是比较有层次感的。信息呈现交互上面个人相对比较喜欢画报这种方式，以图片展示为主，对于感兴趣的，点击进入可以进行评论等操作。</p>

<p>昨天做的功课，发布出来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于mac os x 10.6的quicktime x]]></title>
    <link href="http://ikurten.com/blog/2011/07/29/mac-os-x-10.6-quicktime+x/"/>
    <updated>2011-07-29T03:50:05+08:00</updated>
    <id>http://ikurten.com/blog/2011/07/29/mac-os-x-10.6-quicktime x</id>
    <content type="html"><![CDATA[<p>昨天因为看到有个lion dp3补丁，于是手痒，下来安装一下试试。mac os x10.7开发者预览版，尝试一下。没想到，无法更新，而且出错。于是，痛苦的过程开始了，重启进步了系统了。只能用系统盘修复了（ps：系统盘中的是10.6.4的版本）。这个只能怪我自己手痒了。</p>

<p>然后下载更新，因为我原先系统是10.6.7版本，10.6.4的系统<a href="http://developer.apple.com/xcode/" target="_blank">xcode4.1</a>，<a href="http://www.apple.com/mac/facetime/" target="_blank">facetime 1.0</a>都没法用。更新完成，然后安装xcode完忽然出现一个dyld share cache问题，需要（sudo update_dyld_shared_cache -force）这个命令。之后，就是quicktime.framework这个问题了。其中一件灵异事件是，我把这个文件夹移除了，执行命令就没有问题，不移除就出现无法执行share cache这个问题。貌似是一个bug？没深入研究过。</p>

<p>貌似有很多应用需要依赖这个包，<a href="http://www.qq.com/" target="_blank">qq</a>、<a href="http://www.macww.org/" target="_blank">aliwangwang</a>、以及<a href="http://www.popcap.com/" target="_blank">popcap</a>开发的几个游戏。估计是调用了显示movie动画的接口。如果谁像我一样手痒，但是还没删除这些相关的东西，那么我建议你还是别动他，不然很多依赖程序就无法使用了。当然，删除了不是没办法挽救。可以使用<a href="http://www.macupdate.com/app/mac/6812/pacifist" target="_blank">pacifist</a>这个工具软件，打开你的系统安装光盘，然后从对应的文件夹路径下面去找这些东西，直接安装到默认路径就可以了。当然，如果嫌弃quicktime x，可以使用<a href="http://mplayerx.org/" target="_blank">mplayerx</a>这个播放器还是相当不错的。当然，在此基础上进行修改的，<a href="https://bitbucket.org/Tomasen/splayerx/wiki/Home" target="_blank">splayerx</a>也是不错的，省去了你去匹配字母的事情。射手网上字幕资源还是相当多的。</p>

<p>其他的就看你慢慢发觉了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于面试的记录]]></title>
    <link href="http://ikurten.com/blog/2011/07/29/viewer/"/>
    <updated>2011-07-29T03:47:20+08:00</updated>
    <id>http://ikurten.com/blog/2011/07/29/viewer</id>
    <content type="html"><![CDATA[<p>这算是我第一次写关于面试后的记录。呵呵，刚去了<a href="http://www.mogujie.com/" target="_blank">蘑菇街</a>这个公司面试，在<a href="http://ditu.google.cn/maps?ie=UTF8&amp;q=%E6%9D%AD%E5%B7%9E%E5%B1%B1%E6%B0%B4%E4%BA%BA%E5%AE%B6&amp;fb=1&amp;hq=%E5%B1%B1%E6%B0%B4%E4%BA%BA%E5%AE%B6&amp;hnear=%E4%B8%AD%E5%9B%BD%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E&amp;cid=0,0,12302633174348231143&amp;ll=30.271873,120.110564&amp;spn=0.011471,0.023904&amp;z=16&amp;iwloc=A&amp;brcurrent=3,0x344b62bcdd3a234d:0x325d39b9ca1e5a93,0,0x344b641bf7eabb35:0x6eaa153514876e2f%3B5,0,0" target="_blank">山水人家</a>。我算是比较幸运啦，能够在他们搬家之前见一下他们第一个办公场地。之后他们要搬去别的地方了。</p>

<p>办公场地其实就是一个套房，你懂得，基本上都在客厅办公。我去应聘web研发的，因为本身对于服务器端的技术比较感兴趣。跟搞技术的聊天，还是比较好的，思想比较单纯，只聊聊技术。虽然，我没有web开发的经验，特别是对于php的实践经验，但是php这门语言，还是很容易上手的。因为本身没有繁杂的内容，特别是有编码经验的人来说。只是函数以及一些特定的用法比较多，真正熟悉还是需要时日。</p>

<p>面试的时候，让产品经理去面试技术人员，于是，我这个技术人员表示鸭梨好大。特别是这个产品经理还挂着总负责的头衔，也就是CEO。于是，接下去的内容就惨不忍睹了。不过，这样也好，本身每个人的思维方式不同。</p>

<p>需要记录一些注意的问题：</p>

<p>1、需要有准备的应对所有问题。</p>

<p>2、要多多了解未知的东西，所以，需要学会提问。（这里特别提一下<a href="http://iamsujie.com/8000/8018/" target="_blank">这篇文章</a>）</p>

<p>总结了一下，如果从技术角度来讲，还是有希望的。但是，不知道结果的事情，还是不乱猜的好。</p>

<p>以下是人家给我的回信，记录下来算是自勉吧：</p>

<p>&ldquo;我们主要考虑你之前的经验和我们匹配程度不高，另外一点很重要的事情是我们还不能很明确你在技术方面的兴趣程度，从谈话过程中，我们发现你不喜欢谈技术细节和一些深入的东西，你对技术的兴趣、以及以后你在技术方面的成长我们有一定的担心。</p>

<p>找到自己喜欢做的事情非常重要，只有做自己喜欢的事情才能做好、做成。如果你现在还不明确你的兴趣是什么，要抓紧时间想想清楚，如果你已经知道了自己的兴趣，那花些时间验证一下。&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新的起点]]></title>
    <link href="http://ikurten.com/blog/2011/07/29/new-start/"/>
    <updated>2011-07-29T03:47:01+08:00</updated>
    <id>http://ikurten.com/blog/2011/07/29/new-start</id>
    <content type="html"><![CDATA[<p>周一的时候我跟头儿说，我要辞职。然后么，就是一些文档整理，工作移交。只是，因为还要做一部分工作。所以，只能到下个星期办手续了。对于一份自己不喜欢的工作、不喜欢的行业，迟早是要说88的。虽然，照样干的很好，照样可以获得很多。我辞职了，别人问，去哪家公司发展了？我说，没有，我只是单纯的辞职而已。需要一点时间准备，厚积薄发么。</p>

<p>找一家互联网公司，我喜欢他们在做的事情，大不大不要紧。他们做的事情，要是我认为可以的，值得去做的事情。恩，就是这个目的。不然，枉费我这份激情了。技术、产品，只有自己真正热爱的才算。可以不计利益、不问付出，因为肯定会有回报。</p>

<p>谁又不是开始就会的，不是后天锻炼出来的么？我没做过不代表我就不会了。只不过，没有碰到过问题，就不可能成长么。我只是希望做自己又热情去做的，喜欢的事情。仅此而已。于是，我开始使用mac，我开始接触unix，接触hadoop，hbase，cassandra，mongodb，redis，还有nginx，python，ipython。同时么，了解linux，php，mysql。了解web架构么，看书么。</p>

<p>stay hungry，stay foolish！follow my heart！</p>
]]></content>
  </entry>
  
</feed>
